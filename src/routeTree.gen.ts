/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PropertiesIndexImport } from './routes/properties/index'
import { Route as ContactIndexImport } from './routes/contact/index'
import { Route as AboutIndexImport } from './routes/about/index'
import { Route as PropertiesIdImport } from './routes/properties/$id'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PropertiesIndexRoute = PropertiesIndexImport.update({
  id: '/properties/',
  path: '/properties/',
  getParentRoute: () => rootRoute,
} as any)

const ContactIndexRoute = ContactIndexImport.update({
  id: '/contact/',
  path: '/contact/',
  getParentRoute: () => rootRoute,
} as any)

const AboutIndexRoute = AboutIndexImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any)

const PropertiesIdRoute = PropertiesIdImport.update({
  id: '/properties/$id',
  path: '/properties/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/properties/$id': {
      id: '/properties/$id'
      path: '/properties/$id'
      fullPath: '/properties/$id'
      preLoaderRoute: typeof PropertiesIdImport
      parentRoute: typeof rootRoute
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexImport
      parentRoute: typeof rootRoute
    }
    '/contact/': {
      id: '/contact/'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactIndexImport
      parentRoute: typeof rootRoute
    }
    '/properties/': {
      id: '/properties/'
      path: '/properties'
      fullPath: '/properties'
      preLoaderRoute: typeof PropertiesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/properties/$id': typeof PropertiesIdRoute
  '/about': typeof AboutIndexRoute
  '/contact': typeof ContactIndexRoute
  '/properties': typeof PropertiesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/properties/$id': typeof PropertiesIdRoute
  '/about': typeof AboutIndexRoute
  '/contact': typeof ContactIndexRoute
  '/properties': typeof PropertiesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/properties/$id': typeof PropertiesIdRoute
  '/about/': typeof AboutIndexRoute
  '/contact/': typeof ContactIndexRoute
  '/properties/': typeof PropertiesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/properties/$id' | '/about' | '/contact' | '/properties'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/properties/$id' | '/about' | '/contact' | '/properties'
  id:
    | '__root__'
    | '/'
    | '/properties/$id'
    | '/about/'
    | '/contact/'
    | '/properties/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PropertiesIdRoute: typeof PropertiesIdRoute
  AboutIndexRoute: typeof AboutIndexRoute
  ContactIndexRoute: typeof ContactIndexRoute
  PropertiesIndexRoute: typeof PropertiesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PropertiesIdRoute: PropertiesIdRoute,
  AboutIndexRoute: AboutIndexRoute,
  ContactIndexRoute: ContactIndexRoute,
  PropertiesIndexRoute: PropertiesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/properties/$id",
        "/about/",
        "/contact/",
        "/properties/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/properties/$id": {
      "filePath": "properties/$id.tsx"
    },
    "/about/": {
      "filePath": "about/index.tsx"
    },
    "/contact/": {
      "filePath": "contact/index.tsx"
    },
    "/properties/": {
      "filePath": "properties/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
